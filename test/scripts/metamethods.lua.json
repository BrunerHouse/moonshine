{"sourceName":"@metamethods.lua","lineDefined":0,"lastLineDefined":0,"upvalueCount":0,"paramCount":0,"is_vararg":2,"maxStackSize":9,"instructions":[10,0,0,0,10,1,0,0,36,2,0,0,0,0,0,0,9,1,256,2,6,2,1,256,1,3,1,0,28,2,2,2,6,3,1,256,1,4,2,0,28,3,2,2,10,4,0,1,9,4,259,260,36,5,1,0,9,0,261,5,5,5,6,0,12,6,2,3,23,1,6,263,22,0,1,0,2,6,0,1,2,6,1,0,1,7,8,0,28,5,3,1,5,5,6,0,12,6,2,4,23,1,6,265,22,0,1,0,2,6,0,1,2,6,1,0,1,7,10,0,28,5,3,1,5,5,6,0,12,6,4,3,23,1,6,267,22,0,1,0,2,6,0,1,2,6,1,0,1,7,12,0,28,5,3,1,36,5,2,0,9,0,269,5,5,5,6,0,0,6,2,0,0,7,3,0,21,6,6,7,23,1,6,270,22,0,1,0,2,6,0,1,2,6,1,0,1,7,15,0,28,5,3,1,5,5,6,0,0,6,2,0,0,7,4,0,21,6,6,7,23,1,6,272,22,0,1,0,2,6,0,1,2,6,1,0,1,7,17,0,28,5,3,1,5,5,6,0,0,6,4,0,0,7,3,0,21,6,6,7,23,1,6,274,22,0,1,0,2,6,0,1,2,6,1,0,1,7,19,0,28,5,3,1,36,5,3,0,9,0,276,5,5,5,6,0,15,6,2,3,23,1,6,277,22,0,1,0,2,6,0,1,2,6,1,0,1,7,22,0,28,5,3,1,5,5,6,0,15,6,2,4,23,1,6,279,22,0,1,0,2,6,0,1,2,6,1,0,1,7,24,0,28,5,3,1,5,5,6,0,15,6,4,3,23,1,6,281,22,0,1,0,2,6,0,1,2,6,1,0,1,7,26,0,28,5,3,1,36,5,4,0,9,0,283,5,5,5,6,0,16,6,2,3,23,1,6,284,22,0,1,0,2,6,0,1,2,6,1,0,1,7,29,0,28,5,3,1,5,5,6,0,16,6,2,4,23,1,6,286,22,0,1,0,2,6,0,1,2,6,1,0,1,7,31,0,28,5,3,1,5,5,6,0,16,6,4,3,23,1,6,288,22,0,1,0,2,6,0,1,2,6,1,0,1,7,33,0,28,5,3,1,36,5,5,0,9,0,290,5,5,5,6,0,14,6,2,3,23,1,6,291,22,0,1,0,2,6,0,1,2,6,1,0,1,7,36,0,28,5,3,1,5,5,6,0,14,6,2,4,23,1,6,293,22,0,1,0,2,6,0,1,2,6,1,0,1,7,38,0,28,5,3,1,5,5,6,0,14,6,4,3,23,1,6,295,22,0,1,0,2,6,0,1,2,6,1,0,1,7,40,0,28,5,3,1,36,5,6,0,9,0,297,5,5,5,6,0,17,6,2,3,23,1,6,298,22,0,1,0,2,6,0,1,2,6,1,0,1,7,43,0,28,5,3,1,5,5,6,0,17,6,2,4,23,1,6,300,22,0,1,0,2,6,0,1,2,6,1,0,1,7,45,0,28,5,3,1,5,5,6,0,17,6,4,3,23,1,6,302,22,0,1,0,2,6,0,1,2,6,1,0,1,7,47,0,28,5,3,1,36,5,7,0,9,0,304,5,5,5,6,0,13,6,2,3,23,1,6,305,22,0,1,0,2,6,0,1,2,6,1,0,1,7,50,0,28,5,3,1,5,5,6,0,13,6,2,4,23,1,6,307,22,0,1,0,2,6,0,1,2,6,1,0,1,7,52,0,28,5,3,1,5,5,6,0,13,6,4,3,23,1,6,309,22,0,1,0,2,6,0,1,2,6,1,0,1,7,54,0,28,5,3,1,36,5,8,0,9,0,311,5,5,5,6,0,18,6,2,0,23,1,6,312,22,0,1,0,2,6,0,1,2,6,1,0,1,7,57,0,28,5,3,1,1,5,58,0,36,6,9,0,0,0,5,0,9,0,315,6,5,6,6,0,23,1,2,3,22,0,1,0,2,7,0,1,2,7,1,0,1,8,60,0,28,6,3,1,5,6,6,0,23,1,5,317,22,0,1,0,2,7,0,1,2,7,1,0,1,8,62,0,28,6,3,1,5,6,6,0,23,0,2,319,22,0,1,0,2,7,0,1,2,7,1,0,1,8,64,0,28,6,3,1,5,6,6,0,23,1,5,317,22,0,1,0,2,7,0,1,2,7,1,0,1,8,65,0,28,6,3,1,5,6,6,0,23,1,2,2,22,0,1,0,2,7,0,1,2,7,1,0,1,8,66,0,28,6,3,1,5,6,6,0,23,1,5,317,22,0,1,0,2,7,0,1,2,7,1,0,1,8,67,0,28,6,3,1,1,5,58,0,36,6,10,0,0,0,5,0,9,0,324,6,5,6,6,0,25,1,2,3,22,0,1,0,2,7,0,1,2,7,1,0,1,8,69,0,28,6,3,1,5,6,6,0,23,1,5,317,22,0,1,0,2,7,0,1,2,7,1,0,1,8,70,0,28,6,3,1,5,6,6,0,25,0,3,2,22,0,1,0,2,7,0,1,2,7,1,0,1,8,71,0,28,6,3,1,5,6,6,0,23,1,5,328,22,0,1,0,2,7,0,1,2,7,1,0,1,8,73,0,28,6,3,1,1,5,58,0,36,6,11,0,0,0,5,0,9,0,330,6,5,6,6,0,24,1,2,3,22,0,1,0,2,7,0,1,2,7,1,0,1,8,75,0,28,6,3,1,5,6,6,0,23,1,5,317,22,0,1,0,2,7,0,1,2,7,1,0,1,8,76,0,28,6,3,1,5,6,6,0,24,0,3,2,22,0,1,0,2,7,0,1,2,7,1,0,1,8,77,0,28,6,3,1,5,6,6,0,23,1,5,328,22,0,1,0,2,7,0,1,2,7,1,0,1,8,78,0,28,6,3,1,1,5,79,0,9,0,269,336,36,6,12,0,0,0,2,0,0,0,5,0,9,0,337,6,0,6,2,0,1,7,83,0,28,6,2,2,7,6,82,0,5,6,6,0,23,1,5,340,22,0,1,0,2,7,0,1,2,7,1,0,1,8,85,0,28,6,3,1,5,6,6,0,5,7,82,0,23,1,7,342,22,0,1,0,2,7,0,1,2,7,1,0,1,8,87,0,28,6,3,1,30,0,1,0],"constants":["new",3,5,"value","moo","__add","assertTrue","3(__add)5","Add operator should use __add metamethod, if provided [1]","3(__add)moo","Add operator should use __add metamethod, if provided [2]","moo(__add)5","Add operator should use __add metamethod, if provided [3]","__concat","3(__concat)5","Concatenation operator should use __concat metamethod, if provided [1]","3(__concat)moo","Concatenation operator should use __concat metamethod, if provided [2]","moo(__concat)5","Concatenation operator should use __concat metamethod, if provided [3]","__div","3(__div)5","Divide operator should use __div metamethod, if provided [1]","3(__div)moo","Divide operator should use __div metamethod, if provided [2]","moo(__div)5","Divide operator should use __div metamethod, if provided [3]","__mod","3(__mod)5","Modulo operator should use __mod metamethod, if provided [1]","3(__mod)moo","Modulo operator should use __mod metamethod, if provided [2]","moo(__mod)5","Modulo operator should use __mod metamethod, if provided [3]","__mul","3(__mul)5","Muliplication operator should use __mul metamethod, if provided [1]","3(__mul)moo","Muliplication operator should use __mul metamethod, if provided [2]","moo(__mul)5","Muliplication operator should use __mul metamethod, if provided [3]","__pow","3(__pow)5","Exponentiation operator should use __pow metamethod, if provided [1]","3(__pow)moo","Exponentiation operator should use __pow metamethod, if provided [2]","moo(__pow)5","Exponentiation operator should use __pow metamethod, if provided [3]","__sub","3(__sub)5","Subtraction operator should use __sub metamethod, if provided [1]","3(__sub)moo","Subtraction operator should use __sub metamethod, if provided [2]","moo(__sub)5","Subtraction operator should use __sub metamethod, if provided [3]","__unm","(__unm)3","Negation operator should use __unm metamethod, if provided",0,"__eq","Equality operator should use __eq metamethod, if provided [1]",1,"Equality operator should use __eq metamethod, if provided [2]",123,"Equality operator should not use __eq metamethod if objects are of different type [1]","Equality operator should not use __eq metamethod if operands are of different type [2]","Equality operator should not use __eq metamethod if the operands are the same object [1]","Equality operator should not use __eq metamethod if the operands are the same object [2]","__le","Less than or equal to operator should use __le metamethod, if provided [1]","Less than or equal to operator should use __le metamethod, if provided [2]","Less than or equal to operator should use __le metamethod, if provided [3]",2,"Less than or equal to operator should use __le metamethod, if provided [4]","__lt","Less than operator should use __le metamethod, if provided [1]","Less than operator should use __le metamethod, if provided [2]","Less than operator should use __le metamethod, if provided [3]","Less than operator should use __le metamethod, if provided [4]","",null,"__call","y","Dennis","Ron Dennis","When executing a table, __call metamethod should be used, if provided","CEO","When executing a table with a __call metamethod, the return value(s) of __call function should be returned"],"functions":[{"sourceName":"","lineDefined":7,"lastLineDefined":11,"upvalueCount":1,"paramCount":1,"is_vararg":0,"maxStackSize":5,"instructions":[10,1,0,1,9,1,256,0,5,2,1,0,0,3,1,0,4,4,0,0,28,2,3,1,30,1,2,0,30,0,1,0],"constants":["value","setmetatable"],"functions":[],"linePositions":[8,8,9,9,9,9,10,11],"locals":[{"varname":"v","startpc":0,"endpc":7},{"varname":"self","startpc":2,"endpc":7}],"upvalues":["mt"]},{"sourceName":"","lineDefined":20,"lastLineDefined":22,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__add)"],"functions":[],"linePositions":[21,21,21,21,21,22],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":33,"lastLineDefined":35,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__concat)"],"functions":[],"linePositions":[34,34,34,34,34,35],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":45,"lastLineDefined":47,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__div)"],"functions":[],"linePositions":[46,46,46,46,46,47],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":58,"lastLineDefined":60,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__mod)"],"functions":[],"linePositions":[59,59,59,59,59,60],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":71,"lastLineDefined":73,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__mul)"],"functions":[],"linePositions":[72,72,72,72,72,73],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":84,"lastLineDefined":86,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__pow)"],"functions":[],"linePositions":[85,85,85,85,85,86],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":97,"lastLineDefined":99,"upvalueCount":0,"paramCount":2,"is_vararg":0,"maxStackSize":5,"instructions":[6,2,0,256,1,3,1,0,6,4,1,256,21,2,2,4,30,2,2,0,30,0,1,0],"constants":["value","(__sub)"],"functions":[],"linePositions":[98,98,98,98,98,99],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":[]},{"sourceName":"","lineDefined":110,"lastLineDefined":112,"upvalueCount":0,"paramCount":1,"is_vararg":0,"maxStackSize":3,"instructions":[1,1,0,0,6,2,0,257,21,1,1,2,30,1,2,0,30,0,1,0],"constants":["(__unm)","value"],"functions":[],"linePositions":[111,111,111,111,112],"locals":[{"varname":"a","startpc":0,"endpc":4}],"upvalues":[]},{"sourceName":"","lineDefined":129,"lastLineDefined":132,"upvalueCount":1,"paramCount":2,"is_vararg":0,"maxStackSize":3,"instructions":[4,2,0,0,12,2,2,256,8,2,0,0,2,2,1,0,30,2,2,0,30,0,1,0],"constants":[1],"functions":[],"linePositions":[130,130,130,131,131,132],"locals":[{"varname":"a","startpc":0,"endpc":5},{"varname":"b","startpc":0,"endpc":5}],"upvalues":["x"]},{"sourceName":"","lineDefined":150,"lastLineDefined":153,"upvalueCount":1,"paramCount":2,"is_vararg":0,"maxStackSize":3,"instructions":[4,2,0,0,12,2,2,256,8,2,0,0,6,2,0,257,23,1,2,258,22,0,1,0,2,2,0,1,2,2,1,0,30,2,2,0,30,0,1,0],"constants":[1,"value",3],"functions":[],"linePositions":[151,151,151,152,152,152,152,152,152,153],"locals":[{"varname":"a","startpc":0,"endpc":9},{"varname":"b","startpc":0,"endpc":9}],"upvalues":["x"]},{"sourceName":"","lineDefined":167,"lastLineDefined":170,"upvalueCount":1,"paramCount":2,"is_vararg":0,"maxStackSize":3,"instructions":[4,2,0,0,12,2,2,256,8,2,0,0,6,2,0,257,23,1,2,258,22,0,1,0,2,2,0,1,2,2,1,0,30,2,2,0,30,0,1,0],"constants":[1,"value",3],"functions":[],"linePositions":[168,168,168,169,169,169,169,169,169,170],"locals":[{"varname":"a","startpc":0,"endpc":9},{"varname":"b","startpc":0,"endpc":9}],"upvalues":["x"]},{"sourceName":"","lineDefined":184,"lastLineDefined":191,"upvalueCount":2,"paramCount":2,"is_vararg":0,"maxStackSize":4,"instructions":[4,2,0,0,23,0,0,2,22,0,2,0,1,2,0,0,8,2,1,0,4,2,1,0,0,3,1,0,21,2,2,3,8,2,1,0,1,2,1,0,30,2,2,0,30,0,1,0],"constants":["Ron ","CEO"],"functions":[],"linePositions":[185,185,185,186,186,189,189,189,189,190,190,191],"locals":[{"varname":"p1","startpc":0,"endpc":11},{"varname":"p2","startpc":0,"endpc":11}],"upvalues":["o","x"]}],"linePositions":[4,5,11,11,7,13,13,13,14,14,14,15,15,22,22,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,47,47,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,60,60,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,73,73,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,86,86,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,99,99,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,112,112,114,114,114,114,114,114,114,114,127,132,132,132,134,134,134,134,134,134,134,135,135,135,135,135,135,135,137,137,137,137,137,137,137,138,138,138,138,138,138,138,140,140,140,140,140,140,140,141,141,141,141,141,141,141,148,153,153,153,155,155,155,155,155,155,155,156,156,156,156,156,156,156,157,157,157,157,157,157,157,158,158,158,158,158,158,158,165,170,170,170,172,172,172,172,172,172,172,173,173,173,173,173,173,173,174,174,174,174,174,174,174,175,175,175,175,175,175,175,181,182,191,191,191,191,193,193,193,193,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196],"locals":[{"varname":"mt","startpc":1,"endpc":346},{"varname":"Obj","startpc":2,"endpc":346},{"varname":"o","startpc":8,"endpc":346},{"varname":"p","startpc":11,"endpc":346},{"varname":"x","startpc":13,"endpc":346},{"varname":"x","startpc":212,"endpc":346}],"upvalues":[],"sourcePath":"/metamethods.lua"}