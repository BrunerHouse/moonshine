#!/usr/bin/env node

/**
 * @fileOverview Moonshine CLI binary.
 *
 * Format: moonshine command [option option ...] [filepattern filepattern ...]
 *
 * command can be one of:
 *	distil 			Distils a Lua script for use with Moonshine VM.
 *	debug 			Starts a Moonshite remote debugging server.
 *
 *
 * When using distil command, options can be one or more of:
 *	-f:filename 	Output filename. The distilled file will be named according to filename.
 *					Default = input_basename.lua.json
 * 	-j 				Use old JSON format to encode instructions in the output. 
 *					For use with older versions.
 * 	-m 				Minimise output. Strips out unnecessary debugging information. 
 *					Be aware that debugger will not work with this output.
 *	-o:path 		Output path. The folder in which to place the output files.
 *					Default = current path
 *  -p:filename 	Package output to a single file. All 

 *  -pm:filename 
 *	-r 				Recursive distil. All files in subfolders will be distilled too.
 *					Note that option will distil all Lua files in the sub-folders and not
 *					follow any given file masks.
 *
 * filepattern can be:
 * 	filename 		Input filename. 
 * 	?				Use wildcards to specify patterns.
 * 	*				All files in current path.
 *
 * Examples:
 * 	moonshine distil -m -f:myoutput.json myinput.lua
 * 					Distils myinput.lua, removes debugging information and writes the
 *					output to myoutput.json
 *
 *	moonshine distil -j *
 * 					Distils all files in the current path using the old file format and
 *					default filenames.
 *
 *	moonshine distil -m mymod_v???.lua myothermod.lua 
 * 					Distils all files matching the pattern and myothermod.lua, strips
 *					out debugging and writes to the default filenames.
 * 
 *	moonshine distil -o:./json *
 * 					Distils all files to 'json' subfolder.
 * 
 * 
 * When using debug command, options can be one or more of:
 *  -ap:port		App port. The debug server will listen for your app on this port.
 *  -cp:port		Console port. The debug server will server the debug console on this port of
 *					the local machine.
 *  -src:path 		Source path. Uses local source files instead of any stored on the remote
 *					file path.
 * 
 * 
 * @author <a href="mailto:paul.cuthbertson@gamesys.co.uk">Paul Cuthbertson</a>
 * @copyright Gamesys Ltd 2013
 */




var command = process.argv[2],
	filenames = [],
	switches = {},
	Parser = require('../distillery/distillery.moonshine.js').Parser,
	exec = require('child_process').exec,
	fs = require('fs'),
	match,
	packageData,
	arg, i, l;


// Sort through arguments for switches and filenames
for (i = 3, l = process.argv.length; i < l; i++) {
	arg = process.argv[i];

	if (match = arg.match(/^(-\w+)(:(.*))?$/)) {
		switches[match[1]] = match[3] || true;
	} else {
		filenames.push(arg);
	}
}


// Execute command
switch (command) {
	case 'distil': return distil(filenames);
	case 'debug': return startDebugServer();
	default: return console.log('Unknown command: ' + command);
}




/**
 * Distil command. Distils a given list of file patterns.
 * @param {Array} filenames List of file patterns to distil.
 */
function distil (filenames) {
	var filename, i, l;

	if (switches['-p']) {
		packageData = {
			format: 'moonshine.package',
			files: {},
			count: 0
		};
	}

	for (i = 0, l = filenames.length; i < l; i++) {
		filename = filenames[i];

		if (fs.statSync(filename).isDirectory()) {
			if (switches['-r']) distilPath(filename);

		} else if (/^.*\.lua$/.test(filename)) {
			distilLua(filename);
		}
	}
}




/**
 * Distils all files in a given list of file patterns.
 * @param {Array} filenames List of file patterns to distil.
 */
function distilPath (path) {
	var filenames = fs.readdirSync(path),
		i, l;

	for (i = 0, l = filenames.length; i < l; i++) {
		filenames[i] = path + '/' + filenames[i];
	}

	distil(filenames);
}




/**
 * Distils a Lua script. Compiles and distils the given filename.
 * @param {string} filename Input Lua filename.
 */
function distilLua (filename) {
	var luacFilename = filename + '.luac';

	exec('luac -o ' + luacFilename + ' ' + filename, function (err, stdout, stderr) {
		if (err) throw new Error(err);

		distilLuac(luacFilename, filename);
		fs.unlink(luacFilename);
	});
}




/**
 * Distils a Lua bytecode file.
 * @param {string} filename Bytecode filename.
 */
function distilLuac (luacFilename, luaFilename) {
	var pathLib = require('path'),
		parser = new Parser(),
		config = {
			stripDebugging: switches['-m'],
			useInstructionObjects: switches['-j']
		};

	if (packageData) packageData.count++;

	parser.parse(luacFilename, config, function (tree) {
		var path = switches['-o'] || '.',
			reversePath = (pathLib.relative(pathLib.dirname(path), '.') || '.') + '/' + pathLib.basename(luaFilename),
			outputFilename = switches['-f'],
			filename;

		path = (!path || path === true)? './' : path + '/';

		if (outputFilename && outputFilename !== true) {
			filename = path + outputFilename;

		} else {
			//if (match = filename.match(/^(.*)\.luac$/)) filename = match[1];
			filename = path + luaFilename + '.json';
		}


		if (packageData) {
			packageData.files[filename] = tree;
			console.log('Added to package: ' + luaFilename);

			if (switches['-pm'] == luaFilename) packageData.main = filename;
			if (!--packageData.count) writePackage();

		} else {
			tree.sourcePath = reversePath;
			createPath(filename);

			fs.writeFile(filename, JSON.stringify(tree), function (err) {
				if (err) throw new Error(err);
				console.log('File written: ' + filename);
			});
		}
	});
}




function writePackage () {
	var filename = switches['-p'] === true? './package.json' : switches['-p'];

	delete packageData.count;

	fs.writeFile(filename, JSON.stringify(packageData), function (err) {
		if (err) throw new Error(err);
		console.log('File written: ' + filename);
	});
}




function createPath(path) {
	var pos = -1,
		name;

	while ((pos = path.indexOf('/', pos + 1)) >= 0) {
		name = path.substr(0, pos);
		if (!fs.existsSync(name)) fs.mkdirSync(name);
	}
}




function startDebugServer () {
	var DebugServer = require('../debug/server/DebugServer'),
		config = {
			sourcePaths: switches['-src'] && switches['-src'].split(':'),
			appPort: switches['-ap'],
			consolePort: switches['-cp']
		};

	new DebugServer(config);
}
